version: '3.8'

services:
  # Frontend service with HTTPS support
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: tradingagents-frontend:latest
    container_name: tradingagents-frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./frontend/nginx-https.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - tradingagents-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: tradingagents-backend:latest
    container_name: tradingagents-backend
    expose:
      - "8000"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./.env:/app/.env:ro
    env_file:
      - .env
    environment:
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
      TZ: "Asia/Shanghai"
      MONGODB_URL: mongodb://admin:${MONGODB_PASSWORD}@mongodb:27017/tradingagents?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      ENVIRONMENT: production
      DEBUG: false
      LOG_LEVEL: INFO
    depends_on:
      - mongodb
      - redis
    networks:
      - tradingagents-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB with monitoring
  mongodb:
    image: mongo:7.0
    container_name: tradingagents-mongodb
    restart: unless-stopped
    expose:
      - "27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: tradingagents
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./config/mongodb/mongod.conf:/etc/mongod.conf:ro
    command: ["mongod", "--config", "/etc/mongod.conf"]
    networks:
      - tradingagents-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis with monitoring
  redis:
    image: redis:7.2-alpine
    container_name: tradingagents-redis
    restart: unless-stopped
    expose:
      - "6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - tradingagents-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: tradingagents-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - tradingagents-network
    profiles:
      - monitoring

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: tradingagents-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - tradingagents-network
    profiles:
      - monitoring

  # Node exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: tradingagents-node-exporter
    restart: unless-stopped
    expose:
      - "9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - tradingagents-network
    profiles:
      - monitoring

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: tradingagents-cadvisor
    restart: unless-stopped
    expose:
      - "8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - tradingagents-network
    profiles:
      - monitoring

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: tradingagents-loki
    restart: unless-stopped
    expose:
      - "3100"
    volumes:
      - ./config/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - tradingagents-network
    profiles:
      - logging

  # Log collection with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: tradingagents-promtail
    restart: unless-stopped
    volumes:
      - ./config/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - tradingagents-network
    profiles:
      - logging

# Data volumes
volumes:
  mongodb_data:
    driver: local
    name: tradingagents_mongodb_data
  mongodb_config:
    driver: local
    name: tradingagents_mongodb_config
  redis_data:
    driver: local
    name: tradingagents_redis_data
  prometheus_data:
    driver: local
    name: tradingagents_prometheus_data
  grafana_data:
    driver: local
    name: tradingagents_grafana_data
  loki_data:
    driver: local
    name: tradingagents_loki_data
  nginx_logs:
    driver: local
    name: tradingagents_nginx_logs

# Networks
networks:
  tradingagents-network:
    driver: bridge
    name: tradingagents-network